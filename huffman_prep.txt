Adaptive Huffman Prep

create max heap
max heap: 
-largest value (# of characters) on top
-create array of characters (0's or 1's) from right to left
-nodes have counter and character attributes

0 node will always be at the bottom
-0 node contains characters that havent been used yet

how array (thread) is enconded:
-path to 0 node or a character
    0 left, 1 right
-if (first encounter)
    path to 0 node, then ascii value of character 
-else if (encounter again)
    path to character, then 1

huffman tree:
    encoding
    -when encountering a new character, pull character from zero node and create 2 new nodes on top of 0 node
        -first encounter will be ascii value in binary
        -new nodes will have value of 1 by default
    -sibling property
        if (leader is parent of count)
            just increment parent node
        else if (leader is NOT parent)
            swap position with sibling
    -when a character is encountered again, increment character's parent count by 1
    -after every encounter, increment parent count by 1 up along the tree.

    decoding
    -